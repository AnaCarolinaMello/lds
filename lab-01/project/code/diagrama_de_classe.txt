@startuml
class Usuario {
    - id : Long
    - nome : String
    - senha : String
    - email : String
    - cpf : String
    + getId() : Long

}

class Aluno {
    - id : Long
    + getId() : Long
}

class Professor {
    - id : Long
    + getId() : Long
}

class Secretaria {
    - id : Long
    + getId() : Long

}

class Disciplina {
    - nome : String
    - id: Long
    - cargaHoraria: int
    - maximoAlunos : int
    + getNome() : String
}

class Curso {
    - nome : String
    - id: Long
    + getNome() : String

}

class MatriculaDisciplina {
    - id: Long
    - dataMatricula : Date
    + getDataMatricula() : Date

}

enum EnumDisciplina {
    OBRIGATORIA : int
    OPTATIVA : int
}

enum EnumAutorizacao{
    SECRETARIA : String
    PROFESSOR : String
    ALUNO : String
}

class DisciplinaCurso {
    - id : Long
    - periodo : int
    + getPeriodo() : int

}

class ProfessorDisciplina {
   - id : Long
}

Aluno --|> Usuario
Professor --|> Usuario
Secretaria --|> Usuario

EnumAutorizacao -- Usuario

Aluno "*" -- "*" Disciplina 
(Aluno, Disciplina ) . MatriculaDisciplina

Professor "*" -- "1" Disciplina
(Professor, Disciplina) . ProfessorDisciplina 

Aluno "*" -- "1" Curso

Disciplina "*" -- "1..*" Curso
(Disciplina, Curso) . DisciplinaCurso

DisciplinaCurso -- EnumDisciplina

class AlunoService {
        - AlunoRepository alunoRepository

        + saveOrUpdateAluno(aluno: Aluno): Aluno
        + create(id: Long, curso: Curso): Aluno
        + findById(id: Long): Aluno
        + findAll(): List<Aluno>

}


class MatriculaDisciplinaService {
        - MatriculaDisciplinaRepository matriculaDisciplinaRepository
        - DisciplinaCursoService disciplinaCursoService

        + saveOrUpdateMatriculaDisciplina(matriculaDisciplina: MatriculaDisciplina): MatriculaDisciplina
        + create(aluno: Aluno, disciplina: Disciplina): MatriculaDisciplina
        + matricular(aluno: Aluno, disciplina: Disciplina, enumDisciplina: EnumDisciplina): MatriculaDisciplina
        + getMatriculasList(aluno: Aluno): List<MatriculaDisciplina>
        + getMatriculasQuantity(aluno: Aluno, enumDisciplinaRequeired: EnumDisciplina): int
        + getAlunosMatriculados(disciplina: Disciplina): List<Aluno>
        + getAlunosInSemester(ano: int, semestre: int): List<Aluno>
}

class CursoService {
        - CursoRepository cursoRepository

        + saveOrUpdateCurso(curso: Curso): Curso
        + findAllCurso(): List<Curso>
        + findById(id: Long): Curso
        + createCurso(nome: String): Curso

    }

class DisciplinaService {
        - DisciplinaRepository disciplinaRepository

        + saveOrUpdateDisciplina(disciplina: Disciplina): Disciplina
        + findAll(): List<Disciplina>
        + findById(id: Long): Disciplina
        + createDisciplina(nome: String, cargaHoraria: int, maximoAlunos: int): Disciplina
}

class DisciplinaCursoService {
        - DisciplinaCursoRepository disciplinaCursoRepository

        + saveOrUpdateDisciplinaCurso(disciplinaCurso: DisciplinaCurso): DisciplinaCurso
        + createDisciplinaCurso(disciplina: Disciplina, curso: Curso, periodo: int, enumDisciplina: EnumDisciplina): DisciplinaCurso
        + findByCursoAndTipo(curso: Curso, tipo: EnumDisciplina): List<DisciplinaCurso>
        + cursoContainsDiciplina(curso: Curso, disciplina: Disciplina, enumDisciplina: EnumDisciplina): boolean
        + getTipo(curso: Curso, disciplina: Disciplina): EnumDisciplina
}


class ProfessorService {
        - ProfessorRespository professorRespository

        + saveOrUpdateProfessor(professor: Professor): Professor
        + create(id: Long): Professor
    }

class SecretariaService {
        - SecretariaRepository secretariaRepository

        + saveOrUpdateSecretaria(secretaria: Secretaria): Secretaria
        + create(id: Long): Secretaria
}

class UsuarioService {
        - UsuarioRepository usuarioRepository

        + saveOrUpdateUsuario(usuario: Usuario): Usuario
        + findAll(): List<Usuario>
        + findById(id: Long): Usuario
        + delete(id: Long): void
        + findByEmail(email: String): Usuario
        + create(name: String, senha: String, email: String, cpf: String, tipo: EnumAutorizacao): Usuario
        + login(email: String, senha: String): Usuario
        + verificarLogin(email: String, senha: String): void
    }


DisciplinaCursoService -[hidden]- MatriculaDisciplinaService 
CursoService -[hidden]- MatriculaDisciplinaService 
DisciplinaService -[hidden]- CursoService
ProfessorService -[hidden]- DisciplinaService
SecretariaService -[hidden]- ProfessorService
UsuarioService -[hidden]- SecretariaService
@enduml
